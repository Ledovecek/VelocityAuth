plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
}

group = 'me.ledovec'
version = '1.0-SNAPSHOT'

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'com.github.ZorTik:AdvancedSQLClient:0.6.0'
    implementation 'com.github.Carleslc:Simple-YAML:1.8.4'
    compileOnly "com.velocitypowered:velocity-api:3.1.2-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.1.2-SNAPSHOT"
}

jar {
    manifest { attributes("Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' ')) }
    from configurations.runtimeClasspath.collect { entry -> zipTree(entry) }
}

jar { from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}}

tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(ProcessResources) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
